// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Command.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Command.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

void protobuf_ShutdownFile_Command_2eproto() {
  delete ReqAccountOperation::default_instance_;
  delete RetAccountOperation::default_instance_;
  delete ReqLoginGameServer::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_Command_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_Command_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_Command_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ReqAccountOperation::default_instance_ = new ReqAccountOperation();
  RetAccountOperation::default_instance_ = new RetAccountOperation();
  ReqLoginGameServer::default_instance_ = new ReqLoginGameServer();
  ReqAccountOperation::default_instance_->InitAsDefaultInstance();
  RetAccountOperation::default_instance_->InitAsDefaultInstance();
  ReqLoginGameServer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Command_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Command_2eproto_once_);
void protobuf_AddDesc_Command_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Command_2eproto_once_,
                 &protobuf_AddDesc_Command_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Command_2eproto {
  StaticDescriptorInitializer_Command_2eproto() {
    protobuf_AddDesc_Command_2eproto();
  }
} static_descriptor_initializer_Command_2eproto_;
#endif
bool AccountAction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

bool AccountErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

static ::std::string* MutableUnknownFieldsForReqAccountOperation(
    ReqAccountOperation* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAccountOperation::kActionFieldNumber;
const int ReqAccountOperation::kUserFieldNumber;
const int ReqAccountOperation::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAccountOperation::ReqAccountOperation()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReqAccountOperation)
}

void ReqAccountOperation::InitAsDefaultInstance() {
}

ReqAccountOperation::ReqAccountOperation(const ReqAccountOperation& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReqAccountOperation)
}

void ReqAccountOperation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  action_ = 0;
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAccountOperation::~ReqAccountOperation() {
  // @@protoc_insertion_point(destructor:Cmd.ReqAccountOperation)
  SharedDtor();
}

void ReqAccountOperation::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ReqAccountOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReqAccountOperation& ReqAccountOperation::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Command_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Command_2eproto();
#endif
  return *default_instance_;
}

ReqAccountOperation* ReqAccountOperation::default_instance_ = NULL;

ReqAccountOperation* ReqAccountOperation::New(::google::protobuf::Arena* arena) const {
  ReqAccountOperation* n = new ReqAccountOperation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAccountOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:Cmd.ReqAccountOperation)
  if (_has_bits_[0 / 32] & 7u) {
    action_ = 0;
    if (has_user()) {
      user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_password()) {
      password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ReqAccountOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForReqAccountOperation, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Cmd.ReqAccountOperation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Cmd.AccountAction action = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AccountAction_IsValid(value)) {
            set_action(static_cast< ::Cmd::AccountAction >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }

      // required string user = 2;
      case 2: {
        if (tag == 18) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // required string password = 3;
      case 3: {
        if (tag == 26) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReqAccountOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReqAccountOperation)
  return false;
#undef DO_
}

void ReqAccountOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReqAccountOperation)
  // required .Cmd.AccountAction action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // required string user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user(), output);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Cmd.ReqAccountOperation)
}

int ReqAccountOperation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Cmd.ReqAccountOperation)
  int total_size = 0;

  if (has_action()) {
    // required .Cmd.AccountAction action = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  if (has_user()) {
    // required string user = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  if (has_password()) {
    // required string password = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  return total_size;
}
int ReqAccountOperation::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Cmd.ReqAccountOperation)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .Cmd.AccountAction action = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());

    // required string user = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());

    // required string password = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAccountOperation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReqAccountOperation*>(&from));
}

void ReqAccountOperation::MergeFrom(const ReqAccountOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Cmd.ReqAccountOperation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_user()) {
      set_has_user();
      user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
    }
    if (from.has_password()) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ReqAccountOperation::CopyFrom(const ReqAccountOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Cmd.ReqAccountOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAccountOperation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ReqAccountOperation::Swap(ReqAccountOperation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAccountOperation::InternalSwap(ReqAccountOperation* other) {
  std::swap(action_, other->action_);
  user_.Swap(&other->user_);
  password_.Swap(&other->password_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ReqAccountOperation::GetTypeName() const {
  return "Cmd.ReqAccountOperation";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAccountOperation

// required .Cmd.AccountAction action = 1;
bool ReqAccountOperation::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqAccountOperation::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqAccountOperation::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqAccountOperation::clear_action() {
  action_ = 0;
  clear_has_action();
}
 ::Cmd::AccountAction ReqAccountOperation::action() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqAccountOperation.action)
  return static_cast< ::Cmd::AccountAction >(action_);
}
 void ReqAccountOperation::set_action(::Cmd::AccountAction value) {
  assert(::Cmd::AccountAction_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqAccountOperation.action)
}

// required string user = 2;
bool ReqAccountOperation::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqAccountOperation::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqAccountOperation::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqAccountOperation::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user();
}
 const ::std::string& ReqAccountOperation::user() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqAccountOperation.user)
  return user_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqAccountOperation::set_user(const ::std::string& value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cmd.ReqAccountOperation.user)
}
 void ReqAccountOperation::set_user(const char* value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cmd.ReqAccountOperation.user)
}
 void ReqAccountOperation::set_user(const char* value, size_t size) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cmd.ReqAccountOperation.user)
}
 ::std::string* ReqAccountOperation::mutable_user() {
  set_has_user();
  // @@protoc_insertion_point(field_mutable:Cmd.ReqAccountOperation.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReqAccountOperation::release_user() {
  // @@protoc_insertion_point(field_release:Cmd.ReqAccountOperation.user)
  clear_has_user();
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqAccountOperation::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    set_has_user();
  } else {
    clear_has_user();
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:Cmd.ReqAccountOperation.user)
}

// required string password = 3;
bool ReqAccountOperation::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReqAccountOperation::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
void ReqAccountOperation::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReqAccountOperation::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
 const ::std::string& ReqAccountOperation::password() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqAccountOperation.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqAccountOperation::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cmd.ReqAccountOperation.password)
}
 void ReqAccountOperation::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cmd.ReqAccountOperation.password)
}
 void ReqAccountOperation::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cmd.ReqAccountOperation.password)
}
 ::std::string* ReqAccountOperation::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:Cmd.ReqAccountOperation.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReqAccountOperation::release_password() {
  // @@protoc_insertion_point(field_release:Cmd.ReqAccountOperation.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqAccountOperation::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:Cmd.ReqAccountOperation.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForRetAccountOperation(
    RetAccountOperation* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RetAccountOperation::kErrorFieldNumber;
const int RetAccountOperation::kPasswordFieldNumber;
const int RetAccountOperation::kAccountidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RetAccountOperation::RetAccountOperation()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RetAccountOperation)
}

void RetAccountOperation::InitAsDefaultInstance() {
}

RetAccountOperation::RetAccountOperation(const RetAccountOperation& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RetAccountOperation)
}

void RetAccountOperation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = 0;
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetAccountOperation::~RetAccountOperation() {
  // @@protoc_insertion_point(destructor:Cmd.RetAccountOperation)
  SharedDtor();
}

void RetAccountOperation::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RetAccountOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RetAccountOperation& RetAccountOperation::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Command_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Command_2eproto();
#endif
  return *default_instance_;
}

RetAccountOperation* RetAccountOperation::default_instance_ = NULL;

RetAccountOperation* RetAccountOperation::New(::google::protobuf::Arena* arena) const {
  RetAccountOperation* n = new RetAccountOperation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RetAccountOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:Cmd.RetAccountOperation)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RetAccountOperation, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RetAccountOperation*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(error_, accountid_);
    if (has_password()) {
      password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RetAccountOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForRetAccountOperation, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Cmd.RetAccountOperation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Cmd.AccountErrorCode error = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AccountErrorCode_IsValid(value)) {
            set_error(static_cast< ::Cmd::AccountErrorCode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_accountid;
        break;
      }

      // required int32 accountid = 3;
      case 3: {
        if (tag == 24) {
         parse_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RetAccountOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RetAccountOperation)
  return false;
#undef DO_
}

void RetAccountOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RetAccountOperation)
  // required .Cmd.AccountErrorCode error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // required int32 accountid = 3;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->accountid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Cmd.RetAccountOperation)
}

int RetAccountOperation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Cmd.RetAccountOperation)
  int total_size = 0;

  if (has_error()) {
    // required .Cmd.AccountErrorCode error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
  }

  if (has_password()) {
    // required string password = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  if (has_accountid()) {
    // required int32 accountid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->accountid());
  }

  return total_size;
}
int RetAccountOperation::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Cmd.RetAccountOperation)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .Cmd.AccountErrorCode error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());

    // required string password = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());

    // required int32 accountid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->accountid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetAccountOperation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RetAccountOperation*>(&from));
}

void RetAccountOperation::MergeFrom(const RetAccountOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Cmd.RetAccountOperation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_password()) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void RetAccountOperation::CopyFrom(const RetAccountOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Cmd.RetAccountOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetAccountOperation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RetAccountOperation::Swap(RetAccountOperation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RetAccountOperation::InternalSwap(RetAccountOperation* other) {
  std::swap(error_, other->error_);
  password_.Swap(&other->password_);
  std::swap(accountid_, other->accountid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RetAccountOperation::GetTypeName() const {
  return "Cmd.RetAccountOperation";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RetAccountOperation

// required .Cmd.AccountErrorCode error = 1;
bool RetAccountOperation::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RetAccountOperation::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void RetAccountOperation::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void RetAccountOperation::clear_error() {
  error_ = 0;
  clear_has_error();
}
 ::Cmd::AccountErrorCode RetAccountOperation::error() const {
  // @@protoc_insertion_point(field_get:Cmd.RetAccountOperation.error)
  return static_cast< ::Cmd::AccountErrorCode >(error_);
}
 void RetAccountOperation::set_error(::Cmd::AccountErrorCode value) {
  assert(::Cmd::AccountErrorCode_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RetAccountOperation.error)
}

// required string password = 2;
bool RetAccountOperation::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RetAccountOperation::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
void RetAccountOperation::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
void RetAccountOperation::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
 const ::std::string& RetAccountOperation::password() const {
  // @@protoc_insertion_point(field_get:Cmd.RetAccountOperation.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RetAccountOperation::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cmd.RetAccountOperation.password)
}
 void RetAccountOperation::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cmd.RetAccountOperation.password)
}
 void RetAccountOperation::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cmd.RetAccountOperation.password)
}
 ::std::string* RetAccountOperation::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:Cmd.RetAccountOperation.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RetAccountOperation::release_password() {
  // @@protoc_insertion_point(field_release:Cmd.RetAccountOperation.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RetAccountOperation::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:Cmd.RetAccountOperation.password)
}

// required int32 accountid = 3;
bool RetAccountOperation::has_accountid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RetAccountOperation::set_has_accountid() {
  _has_bits_[0] |= 0x00000004u;
}
void RetAccountOperation::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000004u;
}
void RetAccountOperation::clear_accountid() {
  accountid_ = 0;
  clear_has_accountid();
}
 ::google::protobuf::int32 RetAccountOperation::accountid() const {
  // @@protoc_insertion_point(field_get:Cmd.RetAccountOperation.accountid)
  return accountid_;
}
 void RetAccountOperation::set_accountid(::google::protobuf::int32 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RetAccountOperation.accountid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForReqLoginGameServer(
    ReqLoginGameServer* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqLoginGameServer::kAccountidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqLoginGameServer::ReqLoginGameServer()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReqLoginGameServer)
}

void ReqLoginGameServer::InitAsDefaultInstance() {
}

ReqLoginGameServer::ReqLoginGameServer(const ReqLoginGameServer& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReqLoginGameServer)
}

void ReqLoginGameServer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLoginGameServer::~ReqLoginGameServer() {
  // @@protoc_insertion_point(destructor:Cmd.ReqLoginGameServer)
  SharedDtor();
}

void ReqLoginGameServer::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ReqLoginGameServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReqLoginGameServer& ReqLoginGameServer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Command_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Command_2eproto();
#endif
  return *default_instance_;
}

ReqLoginGameServer* ReqLoginGameServer::default_instance_ = NULL;

ReqLoginGameServer* ReqLoginGameServer::New(::google::protobuf::Arena* arena) const {
  ReqLoginGameServer* n = new ReqLoginGameServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqLoginGameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:Cmd.ReqLoginGameServer)
  accountid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ReqLoginGameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForReqLoginGameServer, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Cmd.ReqLoginGameServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 accountid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReqLoginGameServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReqLoginGameServer)
  return false;
#undef DO_
}

void ReqLoginGameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReqLoginGameServer)
  // required int32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->accountid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Cmd.ReqLoginGameServer)
}

int ReqLoginGameServer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Cmd.ReqLoginGameServer)
  int total_size = 0;

  // required int32 accountid = 1;
  if (has_accountid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->accountid());
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLoginGameServer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReqLoginGameServer*>(&from));
}

void ReqLoginGameServer::MergeFrom(const ReqLoginGameServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Cmd.ReqLoginGameServer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ReqLoginGameServer::CopyFrom(const ReqLoginGameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Cmd.ReqLoginGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLoginGameServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqLoginGameServer::Swap(ReqLoginGameServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqLoginGameServer::InternalSwap(ReqLoginGameServer* other) {
  std::swap(accountid_, other->accountid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ReqLoginGameServer::GetTypeName() const {
  return "Cmd.ReqLoginGameServer";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqLoginGameServer

// required int32 accountid = 1;
bool ReqLoginGameServer::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqLoginGameServer::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqLoginGameServer::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqLoginGameServer::clear_accountid() {
  accountid_ = 0;
  clear_has_accountid();
}
 ::google::protobuf::int32 ReqLoginGameServer::accountid() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqLoginGameServer.accountid)
  return accountid_;
}
 void ReqLoginGameServer::set_accountid(::google::protobuf::int32 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqLoginGameServer.accountid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
